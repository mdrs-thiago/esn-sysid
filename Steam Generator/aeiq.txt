Exp: 1 - 	 Ger: 1 - 	 Best:  106.65706 - 	 Mean:  135.70311 - 	 AQreal:  367.44832  	 
Exp: 2 - 	 Ger: 1 - 	 Best:  680.95470 - 	 Mean: 14863.65296 - 	 AQreal:  367.44832  	 
if system_dependent('IsDebugMode')==1, dbquit; end
Experimento_PRINCIPAL_AEIQ_geral
Exp: 1 - 	 Ger: 1 - 	 Best: 28512.11328 - 	 Mean: 38607.10475 - 	 AQreal:  367.44832  	 
{Undefined function or variable 'fitErrorSRG'.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('Experimento_PRINCIPAL_AEIQ_geral', 'C:\Users\CASA\Desktop\Problemas\Steam Generator\Experimento_PRINCIPAL_AEIQ_geral.m', 282)" style="font-weight:bold">Experimento_PRINCIPAL_AEIQ_geral</a> (<a href="matlab: opentoline('C:\Users\CASA\Desktop\Problemas\Steam Generator\Experimento_PRINCIPAL_AEIQ_geral.m',282,0)">line 282</a>)
meanfitTrainErrorSRG = mean(fitErrorSRG);
} 
opentoline('C:\Users\CASA\Desktop\Problemas\Steam Generator\Experimento_PRINCIPAL_AEIQ_geral.m',282,0)
%% Cálculo de métricas, Impressão de resultados e gráficos

tempoTotalRandom = tRandomParcial + tgen;
tempoTotalSRG = tSRGParcial + tgen;
tempoMedioRandom = tempoTotalRandom./numExp;
tempoMedioSRG = tempoTotalSRG./numExp;

meanTrainErrorSRG = mean(trainErrorSRG);
meanValErrorSRG = mean(valErrorSRG);
meanTestErrorSRG = mean(testErrorSRG);
stdTrainErrorSRG = std(trainErrorSRG);
stdValErrorSRG = std(valErrorSRG);
stdTestErrorSRG = std(testErrorSRG);
meanRRSETrainErrorSRG = mean(RRSETrainErrorSRG);
meanRRSEValErrorSRG = mean(RRSEValErrorSRG);
meanRRSETestErrorSRG = mean(RRSETestErrorSRG);
stdRRSETrainErrorSRG = std(RRSETrainErrorSRG);
stdRRSEValErrorSRG = std(RRSEValErrorSRG);
stdRRSETestErrorSRG = std(RRSETestErrorSRG);
meanfitTrainErrorSRG = mean(fitTrainErrorSRG);
meanfitValErrorSRG = mean(fitValErrorSRG);
meanfitTestErrorSRG = mean(fitTestErrorSRG);
stdfitTrainErrorSRG = std(fitTrainErrorSRG);
stdfitValErrorSRG = std(fitValErrorSRG);
stdfitTestErrorSRG = std(fitTestErrorSRG);

meanTrainErrorRandom = mean(trainErrorRandom);
meanValErrorRandom = mean(valErrorRandom);
meanTestErrorRandom = mean(testErrorRandom);
stdTrainErrorRandom = std(trainErrorRandom);
stdValErrorRandom = std(valErrorRandom);
stdTestErrorRandom = std(testErrorRandom);
meanRRSETrainErrorRandom = mean(RRSETrainErrorRandom);
meanRRSEValErrorRandom = mean(RRSEValErrorRandom);
meanRRSETestErrorRandom = mean(RRSETestErrorRandom);
stdRRSETrainErrorRandom = std(RRSETrainErrorRandom);
stdRRSEValErrorRandom = std(RRSEValErrorRandom);
stdRRSETestErrorRandom = std(RRSETestErrorRandom);
meanfitTrainErrorRandom = mean(fitTrainErrorRandom);
meanfitValErrorRandom = mean(fitValErrorRandom);
meanfitTestErrorRandom = mean(fitTestErrorRandom);
stdfitTrainErrorRandom = std(fitTrainErrorRandom);
stdfitValErrorRandom = std(fitValErrorRandom);
stdfitTestErrorRandom = std(fitTestErrorRandom);

% melhor ESN SRG em relação ao teste
[bestErrorSRG,posBestSRG]=min(testErrorSRG);
bestEsnSRG=tr_esn_SRG{1,posBestSRG};
% Previsão do conjunto de treinamento
[predictedTrainOutput,finalState] = test_esn_modificada(trainInputSequence, bestEsnSRG, nForgetPoints);
yTreinoPrevisto = desnormaliza(predictedTrainOutput,yMin,yMax);
% Previsão do conjunto de validação 
[predictedValOutput,finalState] = test_esn_modificada(valInputSequence, bestEsnSRG, 0,'startingState',finalState);
yValPrevisto = desnormaliza(predictedValOutput,yMin,yMax);
% Previsão do conjunto de teste
predictedTestOutput = test_esn_modificada(testInputSequence, bestEsnSRG, 0,'startingState',finalState);
yTestePrevisto = desnormaliza(predictedTestOutput,yMin,yMax);

for j = 1:size(yTestePrevisto,2)
    figure;  
    amostras = [1:length([yTreino; yValidacao;yTeste])];
    subplot(3,1,1);
    plot(amostras((nForgetPoints+1):length(yTreino)),yTreino((nForgetPoints+1):end,j),'b');
    hold on
    plot(amostras((nForgetPoints+1):length(yTreino)),yTreinoPrevisto(:,j),'r');
    legend('Real','Previsto');
    xlabel('Amostras','FontSize',14);
    auxr = num2str(j);
    saida = strcat('y_',auxr,'(k) ');
    ylabel(saida,'FontSize',14);
    title('Treinamento','FontSize',14);
    subplot(3,1,2);
    plot(amostras(length(yTreino)+1:length([yTreino;yValidacao])),yValidacao(:,j),'b');
    hold on
    plot(amostras(length(yTreino)+1:length([yTreino;yValidacao])),yValPrevisto(:,j),'r');
    legend('Real','Previsto');
    xlabel('Amostras','FontSize',14);
    ylabel(saida,'FontSize',14);
    title('Validação','FontSize',14);
    subplot(3,1,3);
    plot(amostras(length([yTreino;yValidacao])+1:length([yTreino;yValidacao;yTeste])),yTeste(:,j),'b');
    hold on
    plot(amostras(length([yTreino;yValidacao])+1:length([yTreino;yValidacao;yTeste])),yTestePrevisto(:,j),'r');
    legend('Real','Previsto');
    xlabel('Amostras','FontSize',14);
    ylabel(saida,'FontSize',14);
    title('Teste','FontSize',14);
end

figure;
plotregression(par_dist_SRG{posBestSRG}(1,:),par_dist_SRG{posBestSRG}(2,:));
subplot(1,1,1);
xlabel('Separação das entradas: ||u_i(t)-u_j(t)||');
ylabel('Separação dos estados:  ||x_i(t)-x_j(t)||');
legend('||x_i(t)-x_j(t)||=||u_i(t)-u_j(t)||','Regressão','Dados');

% melhor ESN Random em relação ao teste
[bestErrorRandom,posBestRandom]=min(testErrorRandom);
bestEsnRandom=tr_esn_random{1,posBestRandom};
% Previsão do conjunto de treinamento
[predictedTrainOutput,finalState] = test_esn_modificada(trainInputSequence, bestEsnRandom, nForgetPoints);
yTreinoPrevisto = desnormaliza(predictedTrainOutput,yMin,yMax);
% Previsão do conjunto de validação 
[predictedValOutput,finalState] = test_esn_modificada(valInputSequence, bestEsnRandom, 0,'startingState',finalState);
yValPrevisto = desnormaliza(predictedValOutput,yMin,yMax);
% Previsão do conjunto de teste
predictedTestOutput = test_esn_modificada(testInputSequence, bestEsnRandom, 0,'startingState',finalState);
yTestePrevisto = desnormaliza(predictedTestOutput,yMin,yMax);

for j = 1:size(yTestePrevisto,2)
    figure;  
    amostras = [1:length([yTreino; yValidacao;yTeste])];
    subplot(3,1,1);
    plot(amostras((nForgetPoints+1):length(yTreino)),yTreino((nForgetPoints+1):end,j),'b');
    hold on
    plot(amostras((nForgetPoints+1):length(yTreino)),yTreinoPrevisto(:,j),'r');
    legend('Real','Previsto');
    xlabel('Amostras','FontSize',14);
    auxr = num2str(j);
    saida = strcat('y_',auxr,'(k) ');
    ylabel(saida,'FontSize',14);
    title('Treinamento','FontSize',14);
    subplot(3,1,2);
    plot(amostras(length(yTreino)+1:length([yTreino;yValidacao])),yValidacao(:,j),'b');
    hold on
    plot(amostras(length(yTreino)+1:length([yTreino;yValidacao])),yValPrevisto(:,j),'r');
    legend('Real','Previsto');
    xlabel('Amostras','FontSize',14);
    ylabel(saida,'FontSize',14);
    title('Validação','FontSize',14);
    subplot(3,1,3);
    plot(amostras(length([yTreino;yValidacao])+1:length([yTreino;yValidacao;yTeste])),yTeste(:,j),'b');
    hold on
    plot(amostras(length([yTreino;yValidacao])+1:length([yTreino;yValidacao;yTeste])),yTestePrevisto(:,j),'r');
    legend('Real','Previsto');
    xlabel('Amostras','FontSize',14);
    ylabel(saida,'FontSize',14);
    title('Teste','FontSize',14);
end

 for exp=1:numExp  
   % Agrupamento usando os vizinhos mais próximos
   [idx, dist] = knnsearch(trainInputSequence((nForgetPoints+1):end,:),trainInputSequence((nForgetPoints+1):end,:),'distance','euclidean','k',2); % Distancia
   % Distância euclidiana dos padrões de entrada agrupados
   dist_entradas=dist(:,2);
   
   % Coleta dos estados gerados pelos padrões, desconsiderando o efeito de estados
   % anteriores e fazendo teach forcing na saída 
   estados = ...
    compute_statematrix_SRG_simplificada(trainInputSequence((nForgetPoints+1):end,:), trainOutputSequence((nForgetPoints+1):end,:), esn_random{exp}, 0);
   
   % Distância dos estados agrupados pelo knn
   for j=1:size(idx,1) % Selecao de pares de estados para determinar a norma 
        primer_estado=estados(idx(j,1),:);  % Primeiro estado obtido
        segundo_estado=estados(idx(j,2),:); % Segundo estado obtido
        [idx_estados,dist_estados_parcial] = knnsearch(primer_estado,segundo_estado,'dist','euclidean','k',2); % obter a distancia euclidiana
        dist_estados(j,1)=dist_estados_parcial;
   end
   
   dist_entradas=dist_entradas';
   dist_estados=dist_estados';
   
   par_dist_bestRandom{exp} = [dist_entradas ; dist_estados]; % Armazena as distancias geradas para cada ESN

   clear primer_estado segundo_estado idx_estados dist_estados_parcial dist_estados estados ...
         idx dist esn dist_entradas

  for k=1:size(par_dist_bestRandom{exp},2) % Obtencao do erro da regressao linear
        erro_chvn(k)=abs(par_dist_bestRandom{exp}(1,k)-par_dist_bestRandom{exp}(2,k));
  end
   
  SRG_bestRandom(exp)=sum(erro_chvn);  
  
  clear erro_chvn SRG_rede distancias
 end
figure;
plotregression(par_dist_bestRandom{posBestRandom}(1,:),par_dist_bestRandom{posBestRandom}(2,:));
subplot(1,1,1);
xlabel('Separação das entradas: ||u_i(t)-u_j(t)||');
ylabel('Separação dos estados:  ||x_i(t)-x_j(t)||');
legend('||x_i(t)-x_j(t)||=||u_i(t)-u_j(t)||','Regressão','Dados');

% Impressão dos resultados
fprintf('\n\n             Etapa 1\n\n');


             Etapa 1

% Etapa 1
for exp =1:numExp
    
fprintf('Exp %d - Aptidao: %f\n',exp,bestRRSEness(exp));
    
end
{Undefined function or variable 'bestRRSEness'.
} 
clc
% Impressão dos resultados
fprintf('\n\n             Etapa 1\n\n');


             Etapa 1

% Etapa 1
for exp =1:numExp
    
fprintf('Exp %d - Aptidao: %f\n',exp,bestFitness(exp));
    
end
Exp 1 - Aptidao: 28512.113282

fprintf('\nAptidão Média: %f\n',MeanFitness);

Aptidão Média: 28512.113282
fprintf('\nAptidão Desvio: %f\n',StdFitness);

Aptidão Desvio: 0.000000
fprintf('\nTempo Total(%d experimentos): %f s\n',numExp,tempo1);

Tempo Total(1 experimentos): 430.488799 s

% Etapa 2 - Random
fprintf('\n\n             Etapa 2 - Random\n\n');


             Etapa 2 - Random

fprintf('                RMSE\n\n');
                RMSE

for exp =1:numExp
    
fprintf('Exp %d - Treinamento: %f  Validacao: %f  Teste: %f  SRG: %f\n',exp,trainErrorRandom(exp),...
    valErrorRandom(exp),testErrorRandom(exp),SRG_bestRandom(exp));
    
end
Exp 1 - Treinamento: 0.514671  Validacao: 4.583377  Teste: 3.950069  SRG: 1123.326706

fprintf('\nMédia: Treinamento: %f  Validacao: %f  Teste: %f\n',meanTrainErrorRandom,...
    meanValErrorRandom,meanTestErrorRandom);

Média: Treinamento: 0.514671  Validacao: 4.583377  Teste: 3.950069
fprintf('\nDesvio: Treinamento: %f  Validacao: %f  Teste: %f\n',stdTrainErrorRandom,...
    stdValErrorRandom,stdTestErrorRandom);

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000
fprintf('\nMelhor: Treinamento: %f  Validacao: %f  Teste: %f  SRG: %f\n\n',trainErrorRandom(posBestRandom),...
    valErrorRandom(posBestRandom),testErrorRandom(posBestRandom),SRG_bestRandom(posBestRandom));

Melhor: Treinamento: 0.514671  Validacao: 4.583377  Teste: 3.950069  SRG: 1123.326706


fprintf('                fit\n\n');
                fit

for exp =1:numExp
    
fprintf('Exp %d - Treinamento: %f  Validacao: %f  Teste: %f  SRG: %f\n',exp,fitTrainErrorRandom(exp),...
    fitValErrorRandom(exp),fitTestErrorRandom(exp),SRG_bestRandom(exp));
    
end
Exp 1 - Treinamento: 95.335040  Validacao: 79.562643  Teste: 81.618349  SRG: 1123.326706

fprintf('\nMédia: Treinamento: %f  Validacao: %f  Teste: %f\n',meanfitTrainErrorRandom,...
    meanfitValErrorRandom,meanfitTestErrorRandom);

Média: Treinamento: 95.335040  Validacao: 79.562643  Teste: 81.618349
fprintf('\nDesvio: Treinamento: %f  Validacao: %f  Teste: %f\n',stdfitTrainErrorRandom,...
    stdfitValErrorRandom,stdfitTestErrorRandom);

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000
fprintf('\nMelhor: Treinamento: %f  Validacao: %f  Teste: %f  SRG: %f\n',fitTrainErrorRandom(posBestRandom),...
    fitValErrorRandom(posBestRandom),fitTestErrorRandom(posBestRandom),SRG_bestRandom(posBestRandom));

Melhor: Treinamento: 95.335040  Validacao: 79.562643  Teste: 81.618349  SRG: 1123.326706

fprintf('                RRSE\n\n');
                RRSE

for exp =1:numExp
    
fprintf('Exp %d - Treinamento: %f  Validacao: %f  Teste: %f  SRG: %f\n',exp,RRSETrainErrorRandom(exp),...
    RRSEValErrorRandom(exp),RRSETestErrorRandom(exp),SRG_bestRandom(exp));
    
end
Exp 1 - Treinamento: 0.018315  Validacao: 0.156881  Teste: 0.170329  SRG: 1123.326706

fprintf('\nMédia: Treinamento: %f  Validacao: %f  Teste: %f\n',meanRRSETrainErrorRandom,...
    meanRRSEValErrorRandom,meanRRSETestErrorRandom);

Média: Treinamento: 0.018315  Validacao: 0.156881  Teste: 0.170329
fprintf('\nDesvio: Treinamento: %f  Validacao: %f  Teste: %f\n',stdRRSETrainErrorRandom,...
    stdRRSEValErrorRandom,stdRRSETestErrorRandom);

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000
fprintf('\nMelhor: Treinamento: %f  Validacao: %f  Teste: %f  SRG: %f\n',RRSETrainErrorRandom(posBestRandom),...
    RRSEValErrorRandom(posBestRandom),RRSETestErrorRandom(posBestRandom),SRG_bestRandom(posBestRandom));

Melhor: Treinamento: 0.018315  Validacao: 0.156881  Teste: 0.170329  SRG: 1123.326706

fprintf('\nTempo Total(%d experimentos): %f s\n',numExp,tempoTotalRandom);

Tempo Total(1 experimentos): 353.898944 s

% Etapa 2 - SRG
fprintf('\n\n             Etapa 2 - SRG\n\n');


             Etapa 2 - SRG

fprintf('                RMSE\n\n');
                RMSE

for exp =1:numExp
    
fprintf('Exp %d - Treinamento: %f  Validacao: %f  Teste: %f  SRG: %f\n',exp,trainErrorSRG(exp),...
    valErrorSRG(exp),testErrorSRG(exp),SRG{exp});
    
end
Exp 1 - Treinamento: 0.514671  Validacao: 4.583377  Teste: 3.950069  SRG: 1123.326706

fprintf('\nMédia: Treinamento: %f  Validacao: %f  Teste: %f\n',meanTrainErrorSRG,...
    meanValErrorSRG,meanTestErrorSRG);

Média: Treinamento: 0.514671  Validacao: 4.583377  Teste: 3.950069
fprintf('\nDesvio: Treinamento: %f  Validacao: %f  Teste: %f\n',stdTrainErrorSRG,...
    stdValErrorSRG,stdTestErrorSRG);

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000
fprintf('\nMelhor: Treinamento: %f  Validacao: %f  Teste: %f  SRG: %f\n\n',trainErrorSRG(posBestSRG),...
    valErrorSRG(posBestSRG),testErrorSRG(posBestSRG),SRG{posBestSRG});

Melhor: Treinamento: 0.514671  Validacao: 4.583377  Teste: 3.950069  SRG: 1123.326706



fprintf('                fit\n\n');
                fit

for exp =1:numExp
    
fprintf('Exp %d - Treinamento: %f  Validacao: %f  Teste: %f  SRG: %f\n',exp,RRSETrainErrorSRG(exp),...
    RRSEValErrorSRG(exp),RRSETestErrorSRG(exp),SRG{exp});
    
end
Exp 1 - Treinamento: 0.018315  Validacao: 0.156881  Teste: 0.170329  SRG: 1123.326706

fprintf('\nMédia: Treinamento: %f  Validacao: %f  Teste: %f\n',meanRRSETrainErrorSRG,...
    meanRRSEValErrorSRG,meanRRSETestErrorSRG);

Média: Treinamento: 0.018315  Validacao: 0.156881  Teste: 0.170329
fprintf('\nDesvio: Treinamento: %f  Validacao: %f  Teste: %f\n',stdRRSETrainErrorSRG,...
    stdRRSEValErrorSRG,stdRRSETestErrorSRG);

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000
fprintf('\nMelhor: Treinamento: %f  Validacao: %f  Teste: %f  SRG: %f\n',RRSETrainErrorSRG(posBestSRG),...
    RRSEValErrorSRG(posBestSRG),RRSETestErrorSRG(posBestSRG),SRG{posBestSRG});

Melhor: Treinamento: 0.018315  Validacao: 0.156881  Teste: 0.170329  SRG: 1123.326706

fprintf('                RRSE\n\n');
                RRSE

for exp =1:numExp
    
fprintf('Exp %d - Treinamento: %f  Validacao: %f  Teste: %f  SRG: %f\n',exp,RRSETrainErrorSRG(exp),...
    RRSEValErrorSRG(exp),RRSETestErrorSRG(exp),SRG{exp});
    
end
Exp 1 - Treinamento: 0.018315  Validacao: 0.156881  Teste: 0.170329  SRG: 1123.326706

fprintf('\nMédia: Treinamento: %f  Validacao: %f  Teste: %f\n',meanRRSETrainErrorSRG,...
    meanRRSEValErrorSRG,meanRRSETestErrorSRG);

Média: Treinamento: 0.018315  Validacao: 0.156881  Teste: 0.170329
fprintf('\nDesvio: Treinamento: %f  Validacao: %f  Teste: %f\n',stdRRSETrainErrorSRG,...
    stdRRSEValErrorSRG,stdRRSETestErrorSRG);

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000
fprintf('\nMelhor: Treinamento: %f  Validacao: %f  Teste: %f  SRG: %f\n',RRSETrainErrorSRG(posBestSRG),...
    RRSEValErrorSRG(posBestSRG),RRSETestErrorSRG(posBestSRG),SRG{posBestSRG});

Melhor: Treinamento: 0.018315  Validacao: 0.156881  Teste: 0.170329  SRG: 1123.326706

fprintf('\nTempo Total(%d experimentos): %f s\n',numExp,tempoTotalSRG);

Tempo Total(1 experimentos): 326.938131 s

save (nomeTeste)

diary off
if system_dependent('IsDebugMode')==1, dbquit; end
clear
load resultadosOtimizacaoAEIQ.mat
%% Etapa 2 - Otimização dos pesos do reservatório
tic
for exp = 1:numExp

  reservatorio = ceil(sol{exp}(1)); % número de neurônios no reservatório

  raio =   sol{exp}(2);      % raio espectral
 
  ScalWin = sol{exp}(3);     % constante de multiplicação da matriz Win
 
  ScalWback = sol{exp}(4);   % constante de multiplicação da matriz Wback
 
  vazamento = sol{exp}(5);   % constante de vazamento do neurônio leaky integrator

  conectividade = sol{exp}(6); % percentual de conectividade do reservatório

  nInputUnits =  size(trainInputSequence,2); 
  nInternalUnits = reservatorio; 
  nOutputUnits = size(trainOutputSequence,2);

  esnP{exp} = generate_esn2(nInputUnits, nInternalUnits, nOutputUnits, ScalWin, ScalWback, conectividade, ...
      'spectralRadius',raio,'inputScaling',1* ones(nInputUnits,1),'inputShift',0*ones(nInputUnits,1), ...
      'teacherScaling',1*ones(nOutputUnits,1),'teacherShift',0*ones(nOutputUnits,1),'feedbackScaling', 1, ...
      'type', 'leaky_esn','leakage',vazamento,...
      'reservoirActivationFunction','tanh',...
      'outputActivationFunction', 'identity','inverseOutputActivationFunction','identity',...
      'methodWeightCompute','pseudoinverse', 'timeConstants',1 * ones(nInternalUnits,1));  
    
  esnP{exp}.internalWeights = esnP{exp}.spectralRadius * esnP{exp}.internalWeights_UnitSR;  
  
  posicoes = esnP{exp}.internalWeights ~= 0; % posições de W com valores diferentes de zero

  num_var2  = size(esnP{exp}.internalWeights(posicoes),1); % total de pesos não nulos de W

  limInf2 = (-1.*ones(1,num_var))'; 
  limSup2 = (1.*ones(1,num_var))';
 
  [solP{exp}, classic,  evobestFitness2{exp}, trace] = aeiq_br_real(num_var2, numPulses2, numClassic2, ...
     genToWidth2, generations2, crossover2, qCrossover2, showEv,  gap2, exp,seed,fun2,limInf2,limSup2,trainInputSequence,trainOutputSequence,valInputSequence,yValidacao,yMin,yMax,...
    nForgetPoints,esnP{exp},metricaErro,posicoes);

  esnP{exp}.internalWeights(posicoes) = solP{exp}';   
  opts2.tol = 1e-3;
  opts2.disp = 0;
  maxVal = max(abs(eigs(esnP{exp}.internalWeights,1, 'lm', opts2)));
  esnP{exp}.internalWeights = esnP{exp}.internalWeights/maxVal;
  esnP{exp}.internalWeights = esnP{exp}.internalWeights.*esnP{exp}.spectralRadius;

  % Treinamento da ESN
  trESNP{exp} = ...
  train_esn(trainInputSequence, trainOutputSequence, esnP{exp}, nForgetPoints) ; 
  
  % Previsão do conjunto de treinamento
  [predictedTrainOutput,finalState] = test_esn_modificada(trainInputSequence, trESNP{exp}, nForgetPoints);
  yTreinoPrevisto = desnormaliza(predictedTrainOutput,yMin,yMax);
  % Cálculo do RMSE no conjunto de treinamento
  trainErrorP(exp) = feval(metricaErro,yTreinoPrevisto, yTreino);
 
  % Previsão do conjunto de validação 
  [predictedValOutput,finalState] = test_esn_modificada(valInputSequence, trESNP{exp}, 0,'startingState',finalState);
   yValPrevisto = desnormaliza(predictedValOutput,yMin,yMax);
  % Cálculo do RMSE no conjunto de validação
  valErrorP(exp) = feval(metricaErro,yValPrevisto, yValidacao);
  
  % Previsão do conjunto de teste
  predictedTestOutput = test_esn_modificada(testInputSequence, trESNP{exp}, 0,'startingState',finalState);
  %predictedTestOutput = test_esn_modificada(testInputSequence, best_ESN, 0);
  yTestePrevisto = desnormaliza(predictedTestOutput,yMin,yMax);
  %Cálculo do RMSE no conjunto de teste
  testErrorP(exp) = feval(metricaErro,yTestePrevisto, yTeste);
end   
{Undefined function or variable 'fun2'.
} 
numPulses2 = 1;     % população quântica
numClassic2 = 3;    % população clássica
genToWidth2 = 5;    % intervalo de gerações para atualização da população quântica
generations2 = 1;   % número de gerações
crossover2 = 0.05;  % taxa de crossover clássico real
qCrossover2 = 0.05; % taxa de crossover quântico
gap2 = numClassic2;    

fun2 = 'calculaErroPesos'; % nome da função de aptidão
%% Etapa 2 - Otimização dos pesos do reservatório
tic
for exp = 1:numExp

  reservatorio = ceil(sol{exp}(1)); % número de neurônios no reservatório

  raio =   sol{exp}(2);      % raio espectral
 
  ScalWin = sol{exp}(3);     % constante de multiplicação da matriz Win
 
  ScalWback = sol{exp}(4);   % constante de multiplicação da matriz Wback
 
  vazamento = sol{exp}(5);   % constante de vazamento do neurônio leaky integrator

  conectividade = sol{exp}(6); % percentual de conectividade do reservatório

  nInputUnits =  size(trainInputSequence,2); 
  nInternalUnits = reservatorio; 
  nOutputUnits = size(trainOutputSequence,2);

  esnP{exp} = generate_esn2(nInputUnits, nInternalUnits, nOutputUnits, ScalWin, ScalWback, conectividade, ...
      'spectralRadius',raio,'inputScaling',1* ones(nInputUnits,1),'inputShift',0*ones(nInputUnits,1), ...
      'teacherScaling',1*ones(nOutputUnits,1),'teacherShift',0*ones(nOutputUnits,1),'feedbackScaling', 1, ...
      'type', 'leaky_esn','leakage',vazamento,...
      'reservoirActivationFunction','tanh',...
      'outputActivationFunction', 'identity','inverseOutputActivationFunction','identity',...
      'methodWeightCompute','pseudoinverse', 'timeConstants',1 * ones(nInternalUnits,1));  
    
  esnP{exp}.internalWeights = esnP{exp}.spectralRadius * esnP{exp}.internalWeights_UnitSR;  
  
  posicoes = esnP{exp}.internalWeights ~= 0; % posições de W com valores diferentes de zero

  num_var2  = size(esnP{exp}.internalWeights(posicoes),1); % total de pesos não nulos de W

  limInf2 = (-1.*ones(1,num_var))'; 
  limSup2 = (1.*ones(1,num_var))';
 
  [solP{exp}, classic,  evobestFitness2{exp}, trace] = aeiq_br_real(num_var2, numPulses2, numClassic2, ...
     genToWidth2, generations2, crossover2, qCrossover2, showEv,  gap2, exp,seed,fun2,limInf2,limSup2,trainInputSequence,trainOutputSequence,valInputSequence,yValidacao,yMin,yMax,...
    nForgetPoints,esnP{exp},metricaErro,posicoes);

  esnP{exp}.internalWeights(posicoes) = solP{exp}';   
  opts2.tol = 1e-3;
  opts2.disp = 0;
  maxVal = max(abs(eigs(esnP{exp}.internalWeights,1, 'lm', opts2)));
  esnP{exp}.internalWeights = esnP{exp}.internalWeights/maxVal;
  esnP{exp}.internalWeights = esnP{exp}.internalWeights.*esnP{exp}.spectralRadius;

  % Treinamento da ESN
  trESNP{exp} = ...
  train_esn(trainInputSequence, trainOutputSequence, esnP{exp}, nForgetPoints) ; 
  
  % Previsão do conjunto de treinamento
  [predictedTrainOutput,finalState] = test_esn_modificada(trainInputSequence, trESNP{exp}, nForgetPoints);
  yTreinoPrevisto = desnormaliza(predictedTrainOutput,yMin,yMax);
  % Cálculo do RMSE no conjunto de treinamento
  trainErrorP(exp) = feval(metricaErro,yTreinoPrevisto, yTreino);
 
  % Previsão do conjunto de validação 
  [predictedValOutput,finalState] = test_esn_modificada(valInputSequence, trESNP{exp}, 0,'startingState',finalState);
   yValPrevisto = desnormaliza(predictedValOutput,yMin,yMax);
  % Cálculo do RMSE no conjunto de validação
  valErrorP(exp) = feval(metricaErro,yValPrevisto, yValidacao);
  
  % Previsão do conjunto de teste
  predictedTestOutput = test_esn_modificada(testInputSequence, trESNP{exp}, 0,'startingState',finalState);
  %predictedTestOutput = test_esn_modificada(testInputSequence, best_ESN, 0);
  yTestePrevisto = desnormaliza(predictedTestOutput,yMin,yMax);
  %Cálculo do RMSE no conjunto de teste
  testErrorP(exp) = feval(metricaErro,yTestePrevisto, yTeste);
end   
<a href="matlab: opentoline('C:\Users\CASA\Desktop\Problemas\Steam Generator\aeiq_br_real.m',360,1)">360 </a>              fitness (j,1) = feval(fun,classic(j,1:param_real) ,varargin{:});
if system_dependent('IsDebugMode')==1, dbquit; end
clc
%% Etapa 2 - Otimização dos pesos do reservatório
tic
for exp = 1:numExp

  reservatorio = ceil(sol{exp}(1)); % número de neurônios no reservatório

  raio =   sol{exp}(2);      % raio espectral
 
  ScalWin = sol{exp}(3);     % constante de multiplicação da matriz Win
 
  ScalWback = sol{exp}(4);   % constante de multiplicação da matriz Wback
 
  vazamento = sol{exp}(5);   % constante de vazamento do neurônio leaky integrator

  conectividade = sol{exp}(6); % percentual de conectividade do reservatório

  nInputUnits =  size(trainInputSequence,Exp: 1 - 	 Ger: 1 - 	 Best:  322.04381 - 	 Mean: 1488.52539 - 	 AQreal:  367.44832  	 
Exp: 1 - 	 Ger: 1 - 	 Best:  240.60055 - 	 Mean:  286.00243 - 	 AQreal:    2.00000  	 


             Etapa 1

Exp 1 - Aptidao: 322.043809

Aptidão Média: 322.043809

Aptidão Desvio: 0.000000

Tempo Total(1 experimentos): 706.869594 s


             Etapa 2 - Random

                RMSE

Exp 1 - Treinamento: 622.719196  Validacao: 604.826507  Teste: 603.055869  SRG: 20846.156331

Média: Treinamento: 622.719196  Validacao: 604.826507  Teste: 603.055869

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000

Melhor: Treinamento: 622.719196  Validacao: 604.826507  Teste: 603.055869  SRG: 20846.156331

                fit

Exp 1 - Treinamento: -5338.609416  Validacao: -4535.768636  Teste: -5097.125858  SRG: 20846.156331

Média: Treinamento: -5338.609416  Validacao: -4535.768636  Teste: -5097.125858

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000

Melhor: Treinamento: -5338.609416  Validacao: -4535.768636  Teste: -5097.125858  SRG: 20846.156331
                RRSE

Exp 1 - Treinamento: 22.337211  Validacao: 16.718996  Teste: 20.911535  SRG: 20846.156331

Média: Treinamento: 22.337211  Validacao: 16.718996  Teste: 20.911535

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000

Melhor: Treinamento: 22.337211  Validacao: 16.718996  Teste: 20.911535  SRG: 20846.156331

Tempo Total(1 experimentos): 959.614146 s


             Etapa 2 - SRG

                RMSE

Exp 1 - Treinamento: 622.719196  Validacao: 604.826507  Teste: 603.055869  SRG: 20846.156331

Média: Treinamento: 622.719196  Validacao: 604.826507  Teste: 603.055869

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000

Melhor: Treinamento: 622.719196  Validacao: 604.826507  Teste: 603.055869  SRG: 20846.156331

                fit

Exp 1 - Treinamento: -5338.609416  Validacao: -4535.768636  Teste: -5097.125858  SRG: 20846.156331

Média: Treinamento: -5338.609416  Validacao: -4535.768636  Teste: -5097.125858

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000

Melhor: Treinamento: -5338.609416  Validacao: -4535.768636  Teste: -5097.125858  SRG: 20846.156331
                RRSE

Exp 1 - Treinamento: 22.337211  Validacao: 16.718996  Teste: 20.911535  SRG: 20846.156331

Média: Treinamento: 22.337211  Validacao: 16.718996  Teste: 20.911535

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000

Melhor: Treinamento: 22.337211  Validacao: 16.718996  Teste: 20.911535  SRG: 20846.156331

Tempo Total(1 experimentos): 868.033147 s
if system_dependent('IsDebugMode')==1, dbquit; end
Experimento_PRINCIPAL_AEIQ_geral
Exp: 1 - 	 Ger: 1 - 	 Best: 1388.11053 - 	 Mean: 3299.65077 - 	 AQreal:  367.44832  	 
{Matrix dimensions must agree.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('compute_statematrix', 'C:\Users\CASA\Desktop\Problemas\Steam Generator\compute_statematrix.m', 139)" style="font-weight:bold">compute_statematrix</a> (<a href="matlab: opentoline('C:\Users\CASA\Desktop\Problemas\Steam Generator\compute_statematrix.m',139,0)">line 139</a>)
        in = esn.inputScaling .* inputSequence(i,:)' + esn.inputShift;  % in is column vector

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('Experimento_PRINCIPAL_AEIQ_geral', 'C:\Users\CASA\Desktop\Problemas\Steam Generator\Experimento_PRINCIPAL_AEIQ_geral.m', 132)" style="font-weight:bold">Experimento_PRINCIPAL_AEIQ_geral</a> (<a href="matlab: opentoline('C:\Users\CASA\Desktop\Problemas\Steam Generator\Experimento_PRINCIPAL_AEIQ_geral.m',132,0)">line 132</a>)
   stateCollectMat = compute_statematrix(trainInputSequence(1:nForgetPoints),trainOutputSequence(1:nForgetPoints),esn_totais{exp,i},0);
} 
opentoline('C:\Users\CASA\Desktop\Problemas\Steam Generator\compute_statematrix.m',139,0)
opentoline('C:\Users\CASA\Desktop\Problemas\Steam Generator\Experimento_PRINCIPAL_AEIQ_geral.m',132,0)
Experimento_PRINCIPAL_AEIQ_geral
Exp: 1 - 	 Ger: 1 - 	 Best:    6.25749 - 	 Mean: 3666.56535 - 	 AQreal:  367.44832  	 
Exp: 1 - 	 Ger: 1 - 	 Best:    5.42284 - 	 Mean:    5.74817 - 	 AQreal:    2.00000  	 


             Etapa 1

Exp 1 - Aptidao: 6.257490

Aptidão Média: 6.257490

Aptidão Desvio: 0.000000

Tempo Total(1 experimentos): 52.176591 s


             Etapa 2 - Random

                RMSE

Exp 1 - Treinamento: 2.079311  Validacao: 9.078886  Teste: 7.502229  SRG: 6462.482394

Média: Treinamento: 2.079311  Validacao: 9.078886  Teste: 7.502229

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000

Melhor: Treinamento: 2.079311  Validacao: 9.078886  Teste: 7.502229  SRG: 6462.482394

                fit

Exp 1 - Treinamento: 89.544933  Validacao: 68.829700  Teste: 70.329730  SRG: 6462.482394

Média: Treinamento: 89.544933  Validacao: 68.829700  Teste: 70.329730

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000

Melhor: Treinamento: 89.544933  Validacao: 68.829700  Teste: 70.329730  SRG: 6462.482394
                RRSE

Exp 1 - Treinamento: 0.090564  Validacao: 0.327140  Teste: 0.338035  SRG: 6462.482394

Média: Treinamento: 0.090564  Validacao: 0.327140  Teste: 0.338035

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000

Melhor: Treinamento: 0.090564  Validacao: 0.327140  Teste: 0.338035  SRG: 6462.482394

Tempo Total(1 experimentos): 38.742506 s


             Etapa 2 - SRG

                RMSE

Exp 1 - Treinamento: 2.079311  Validacao: 9.078886  Teste: 7.502229  SRG: 6462.482394

Média: Treinamento: 2.079311  Validacao: 9.078886  Teste: 7.502229

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000

Melhor: Treinamento: 2.079311  Validacao: 9.078886  Teste: 7.502229  SRG: 6462.482394

                fit

Exp 1 - Treinamento: 89.544933  Validacao: 68.829700  Teste: 70.329730  SRG: 6462.482394

Média: Treinamento: 89.544933  Validacao: 68.829700  Teste: 70.329730

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000

Melhor: Treinamento: 89.544933  Validacao: 68.829700  Teste: 70.329730  SRG: 6462.482394
                RRSE

Exp 1 - Treinamento: 0.090564  Validacao: 0.327140  Teste: 0.338035  SRG: 6462.482394

Média: Treinamento: 0.090564  Validacao: 0.327140  Teste: 0.338035

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000

Melhor: Treinamento: 0.090564  Validacao: 0.327140  Teste: 0.338035  SRG: 6462.482394

Tempo Total(1 experimentos): 39.322172 s


             Etapa 2 - Otimização dos pesos do reservatório

                RMSE

Exp 1 - Treinamento: 1.921326  Validacao: 5.418421  Teste: 6.816104  SRG: 6463.912520

Média: Treinamento: 1.921326  Validacao: 5.418421  Teste: 6.816104

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000

Melhor: Treinamento: 1.921326  Validacao: 5.418421  Teste: 6.816104  SRG: 6463.912520

                fit

Exp 1 - Treinamento: 90.314923  Validacao: 77.336495  Teste: 76.288849  SRG: 6463.912520

Média: Treinamento: 90.314923  Validacao: 77.336495  Teste: 76.288849

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000

Melhor: Treinamento: 90.314923  Validacao: 77.336495  Teste: 76.288849  SRG: 6463.912520
                RRSE

Exp 1 - Treinamento: 0.083295  Validacao: 0.186588  Teste: 0.312214  SRG: 6463.912520

Média: Treinamento: 0.083295  Validacao: 0.186588  Teste: 0.312214

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000

Melhor: Treinamento: 0.083295  Validacao: 0.186588  Teste: 0.312214  SRG: 6463.912520

Tempo Total(1 experimentos): 71.244882 s
Exp: 1 - 	 Ger: 1 - 	 Best:   11.98345 - 	 Mean: 52996.09967 - 	 AQreal:  367.44832  	 
Exp: 1 - 	 Ger: 1 - 	 Best:    2.64109 - 	 Mean:    2.73226 - 	 AQreal:    2.00000  	 


             Etapa 1

Exp 1 - Aptidao: 11.983449

Aptidão Média: 11.983449

Aptidão Desvio: 0.000000

Tempo Total(1 experimentos): 199.930800 s


             Etapa 2 - Random

                RMSE

Exp 1 - Treinamento: 0.817576  Validacao: 2.956211  Teste: 34.336920  SRG: 3309.342555

Média: Treinamento: 0.817576  Validacao: 2.956211  Teste: 34.336920

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000

Melhor: Treinamento: 0.817576  Validacao: 2.956211  Teste: 34.336920  SRG: 3309.342555

                fit

Exp 1 - Treinamento: 93.931348  Validacao: 87.254122  Teste: -404.570947  SRG: 3309.342555

Média: Treinamento: 93.931348  Validacao: 87.254122  Teste: -404.570947

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000

Melhor: Treinamento: 93.931348  Validacao: 87.254122  Teste: -404.570947  SRG: 3309.342555
                RRSE

Exp 1 - Treinamento: 0.031506  Validacao: 0.100213  Teste: 1.241796  SRG: 3309.342555

Média: Treinamento: 0.031506  Validacao: 0.100213  Teste: 1.241796

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000

Melhor: Treinamento: 0.031506  Validacao: 0.100213  Teste: 1.241796  SRG: 3309.342555

Tempo Total(1 experimentos): 125.756468 s


             Etapa 2 - SRG

                RMSE

Exp 1 - Treinamento: 0.817576  Validacao: 2.956211  Teste: 34.336920  SRG: 3309.342555

Média: Treinamento: 0.817576  Validacao: 2.956211  Teste: 34.336920

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000

Melhor: Treinamento: 0.817576  Validacao: 2.956211  Teste: 34.336920  SRG: 3309.342555

                fit

Exp 1 - Treinamento: 93.931348  Validacao: 87.254122  Teste: -404.570947  SRG: 3309.342555

Média: Treinamento: 93.931348  Validacao: 87.254122  Teste: -404.570947

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000

Melhor: Treinamento: 93.931348  Validacao: 87.254122  Teste: -404.570947  SRG: 3309.342555
                RRSE

Exp 1 - Treinamento: 0.031506  Validacao: 0.100213  Teste: 1.241796  SRG: 3309.342555

Média: Treinamento: 0.031506  Validacao: 0.100213  Teste: 1.241796

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000

Melhor: Treinamento: 0.031506  Validacao: 0.100213  Teste: 1.241796  SRG: 3309.342555

Tempo Total(1 experimentos): 125.622194 s


             Etapa 2 - Otimização dos pesos do reservatório

                RMSE

Exp 1 - Treinamento: 0.885251  Validacao: 2.638444  Teste: 7.810972  SRG: 3346.617245

Média: Treinamento: 0.885251  Validacao: 2.638444  Teste: 7.810972

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000

Melhor: Treinamento: 0.885251  Validacao: 2.638444  Teste: 7.810972  SRG: 3346.617245

                fit

Exp 1 - Treinamento: 93.514975  Validacao: 85.277270  Teste: -5.211596  SRG: 3346.617245

Média: Treinamento: 93.514975  Validacao: 85.277270  Teste: -5.211596

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000

Melhor: Treinamento: 93.514975  Validacao: 85.277270  Teste: -5.211596  SRG: 3346.617245
                RRSE

Exp 1 - Treinamento: 0.034238  Validacao: 0.082292  Teste: 0.244527  SRG: 3346.617245

Média: Treinamento: 0.034238  Validacao: 0.082292  Teste: 0.244527

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000

Melhor: Treinamento: 0.034238  Validacao: 0.082292  Teste: 0.244527  SRG: 3346.617245

Tempo Total(1 experimentos): 219.990572 s
Exp: 1 - 	 Ger: 1 - 	 Best:    3.29314 - 	 Mean: 15957.06050 - 	 AQreal:  367.44832  	 
Exp: 1 - 	 Ger: 1 - 	 Best:    5.58706 - 	 Mean: 745118.93076 - 	 AQreal:    2.00000  	 


             Etapa 1

Exp 1 - Aptidao: 3.293140

Aptidão Média: 3.293140

Aptidão Desvio: 0.000000

Tempo Total(1 experimentos): 462.783980 s


             Etapa 2 - Random

                RMSE

Exp 1 - Treinamento: 0.555471  Validacao: 4.210633  Teste: 3.728215  SRG: 782.569116

Média: Treinamento: 0.555471  Validacao: 4.210633  Teste: 3.728215

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000

Melhor: Treinamento: 0.555471  Validacao: 4.210633  Teste: 3.728215  SRG: 782.569116

                fit

Exp 1 - Treinamento: 95.178539  Validacao: 75.489240  Teste: 77.384411  SRG: 782.569116

Média: Treinamento: 95.178539  Validacao: 75.489240  Teste: 77.384411

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000

Melhor: Treinamento: 95.178539  Validacao: 75.489240  Teste: 77.384411  SRG: 782.569116
                RRSE

Exp 1 - Treinamento: 0.020128  Validacao: 0.131357  Teste: 0.148573  SRG: 782.569116

Média: Treinamento: 0.020128  Validacao: 0.131357  Teste: 0.148573

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000

Melhor: Treinamento: 0.020128  Validacao: 0.131357  Teste: 0.148573  SRG: 782.569116

Tempo Total(1 experimentos): 388.580545 s


             Etapa 2 - SRG

                RMSE

Exp 1 - Treinamento: 0.555471  Validacao: 4.210633  Teste: 3.728215  SRG: 782.569116

Média: Treinamento: 0.555471  Validacao: 4.210633  Teste: 3.728215

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000

Melhor: Treinamento: 0.555471  Validacao: 4.210633  Teste: 3.728215  SRG: 782.569116

                fit

Exp 1 - Treinamento: 95.178539  Validacao: 75.489240  Teste: 77.384411  SRG: 782.569116

Média: Treinamento: 95.178539  Validacao: 75.489240  Teste: 77.384411

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000

Melhor: Treinamento: 95.178539  Validacao: 75.489240  Teste: 77.384411  SRG: 782.569116
                RRSE

Exp 1 - Treinamento: 0.020128  Validacao: 0.131357  Teste: 0.148573  SRG: 782.569116

Média: Treinamento: 0.020128  Validacao: 0.131357  Teste: 0.148573

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000

Melhor: Treinamento: 0.020128  Validacao: 0.131357  Teste: 0.148573  SRG: 782.569116

Tempo Total(1 experimentos): 365.868660 s


             Etapa 2 - Otimização dos pesos do reservatório

                RMSE

Exp 1 - Treinamento: 0.644183  Validacao: 5.567159  Teste: 4.865034  SRG: 801.640024

Média: Treinamento: 0.644183  Validacao: 5.567159  Teste: 4.865034

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000

Melhor: Treinamento: 0.644183  Validacao: 5.567159  Teste: 4.865034  SRG: 801.640024

                fit

Exp 1 - Treinamento: 94.780361  Validacao: 70.182329  Teste: 72.546498  SRG: 801.640024

Média: Treinamento: 94.780361  Validacao: 70.182329  Teste: 72.546498

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000

Melhor: Treinamento: 94.780361  Validacao: 70.182329  Teste: 72.546498  SRG: 801.640024
                RRSE

Exp 1 - Treinamento: 0.023939  Validacao: 0.176734  Teste: 0.196711  SRG: 801.640024

Média: Treinamento: 0.023939  Validacao: 0.176734  Teste: 0.196711

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000

Melhor: Treinamento: 0.023939  Validacao: 0.176734  Teste: 0.196711  SRG: 801.640024

Tempo Total(1 experimentos): 739.825596 s
Exp: 1 - 	 Ger: 1 - 	 Best:    6.47819 - 	 Mean:   49.16194 - 	 AQreal:  367.44832  	 
{Undefined function or variable 'tempoTotalPesos'.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('Experimento_PRINCIPAL_AEIQ_inicial', 'C:\Users\CASA\Desktop\Problemas\Steam Generator\Experimento_PRINCIPAL_AEIQ_inicial.m', 390)" style="font-weight:bold">Experimento_PRINCIPAL_AEIQ_inicial</a> (<a href="matlab: opentoline('C:\Users\CASA\Desktop\Problemas\Steam Generator\Experimento_PRINCIPAL_AEIQ_inicial.m',390,0)">line 390</a>)
tempoMedioPesos = tempoTotalPesos./numExp;
} 
opentoline('C:\Users\CASA\Desktop\Problemas\Steam Generator\Experimento_PRINCIPAL_AEIQ_inicial.m',390,0)
%% Cálculo de métricas, Impressão de resultados e gráficos

tempoTotalRandom = tRandomParcial + tgen;
tempoTotalSRG = tSRGParcial + tgen;
tempoMedioRandom = tempoTotalRandom./numExp;
tempoMedioSRG = tempoTotalSRG./numExp;
% tempoMedioPesos = tempoTotalPesos./numExp;

meanTrainErrorSRG = mean(trainErrorSRG);
meanValErrorSRG = mean(valErrorSRG);
meanTestErrorSRG = mean(testErrorSRG);
stdTrainErrorSRG = std(trainErrorSRG);
stdValErrorSRG = std(valErrorSRG);
stdTestErrorSRG = std(testErrorSRG);
meanRRSETrainErrorSRG = mean(RRSETrainErrorSRG);
meanRRSEValErrorSRG = mean(RRSEValErrorSRG);
meanRRSETestErrorSRG = mean(RRSETestErrorSRG);
stdRRSETrainErrorSRG = std(RRSETrainErrorSRG);
stdRRSEValErrorSRG = std(RRSEValErrorSRG);
stdRRSETestErrorSRG = std(RRSETestErrorSRG);
meanfitTrainErrorSRG = mean(fitTrainErrorSRG);
meanfitValErrorSRG = mean(fitValErrorSRG);
meanfitTestErrorSRG = mean(fitTestErrorSRG);
stdfitTrainErrorSRG = std(fitTrainErrorSRG);
stdfitValErrorSRG = std(fitValErrorSRG);
stdfitTestErrorSRG = std(fitTestErrorSRG);

meanTrainErrorRandom = mean(trainErrorRandom);
meanValErrorRandom = mean(valErrorRandom);
meanTestErrorRandom = mean(testErrorRandom);
stdTrainErrorRandom = std(trainErrorRandom);
stdValErrorRandom = std(valErrorRandom);
stdTestErrorRandom = std(testErrorRandom);
meanRRSETrainErrorRandom = mean(RRSETrainErrorRandom);
meanRRSEValErrorRandom = mean(RRSEValErrorRandom);
meanRRSETestErrorRandom = mean(RRSETestErrorRandom);
stdRRSETrainErrorRandom = std(RRSETrainErrorRandom);
stdRRSEValErrorRandom = std(RRSEValErrorRandom);
stdRRSETestErrorRandom = std(RRSETestErrorRandom);
meanfitTrainErrorRandom = mean(fitTrainErrorRandom);
meanfitValErrorRandom = mean(fitValErrorRandom);
meanfitTestErrorRandom = mean(fitTestErrorRandom);
stdfitTrainErrorRandom = std(fitTrainErrorRandom);
stdfitValErrorRandom = std(fitValErrorRandom);
stdfitTestErrorRandom = std(fitTestErrorRandom);

% meanTrainErrorPesos = mean(trainErrorPesos);
% meanValErrorPesos = mean(valErrorPesos);
% meanTestErrorPesos = mean(testErrorPesos);
% stdTrainErrorPesos = std(trainErrorPesos);
% stdValErrorPesos = std(valErrorPesos);
% stdTestErrorPesos = std(testErrorPesos);
% meanRRSETrainErrorPesos = mean(RRSETrainErrorPesos);
% meanRRSEValErrorPesos = mean(RRSEValErrorPesos);
% meanRRSETestErrorPesos = mean(RRSETestErrorPesos);
% stdRRSETrainErrorPesos = std(RRSETrainErrorPesos);
% stdRRSEValErrorPesos = std(RRSEValErrorPesos);
% stdRRSETestErrorPesos = std(RRSETestErrorPesos);
% meanfitTrainErrorPesos = mean(fitTrainErrorPesos);
% meanfitValErrorPesos = mean(fitValErrorPesos);
% meanfitTestErrorPesos = mean(fitTestErrorPesos);
% stdfitTrainErrorPesos = std(fitTrainErrorPesos);
% stdfitValErrorPesos = std(fitValErrorPesos);
% stdfitTestErrorPesos = std(fitTestErrorPesos);

% melhor ESN SRG em relação ao teste
[bestErrorSRG,posBestSRG]=min(testErrorSRG);
bestEsnSRG=tr_esn_SRG{1,posBestSRG};
% Previsão do conjunto de treinamento
[predictedTrainOutput,finalState] = test_esn_modificada(trainInputSequence, bestEsnSRG, nForgetPoints);
yTreinoPrevisto = desnormaliza(predictedTrainOutput,yMin,yMax);
% Previsão do conjunto de validação 
[predictedValOutput,finalState] = test_esn_modificada(valInputSequence, bestEsnSRG, 0,'startingState',finalState);
yValPrevisto = desnormaliza(predictedValOutput,yMin,yMax);
% Previsão do conjunto de teste
predictedTestOutput = test_esn_modificada(testInputSequence, bestEsnSRG, 0,'startingState',finalState);
yTestePrevisto = desnormaliza(predictedTestOutput,yMin,yMax);


for j = 1:size(yTestePrevisto,2)
    figure('Name','Previsão das variáveis de saída com a melhor ESN (teste) da Etapa 2 - SRG','NumberTitle','on');
    amostras = [1:length([yTreino; yValidacao;yTeste])];
    subplot(3,1,1);
    plot(amostras((nForgetPoints+1):length(yTreino)),yTreino((nForgetPoints+1):end,j),'b');
    hold on
    plot(amostras((nForgetPoints+1):length(yTreino)),yTreinoPrevisto(:,j),'r');
    legend('Real','Previsto');
    xlabel('Amostras','FontSize',14);
    
    if(size(yTestePrevisto,2)==1)
        saida = strcat('y(k) ');
    else        
        auxr = num2str(j);
        saida = strcat('y_',auxr,'(k) ');
    end
    
    ylabel(saida,'FontSize',14);
    title('Treinamento','FontSize',14);
    subplot(3,1,2);
    plot(amostras(length(yTreino)+1:length([yTreino;yValidacao])),yValidacao(:,j),'b');
    hold on
    plot(amostras(length(yTreino)+1:length([yTreino;yValidacao])),yValPrevisto(:,j),'r');
    legend('Real','Previsto');
    xlabel('Amostras','FontSize',14);
    ylabel(saida,'FontSize',14);
    title('Validação','FontSize',14);
    subplot(3,1,3);
    plot(amostras(length([yTreino;yValidacao])+1:length([yTreino;yValidacao;yTeste])),yTeste(:,j),'b');
    hold on
    plot(amostras(length([yTreino;yValidacao])+1:length([yTreino;yValidacao;yTeste])),yTestePrevisto(:,j),'r');
    legend('Real','Previsto');
    xlabel('Amostras','FontSize',14);
    ylabel(saida,'FontSize',14);
    title('Teste','FontSize',14);
    filename = strcat('previsao_',saida,'_SRG');
    savefig(filename);
end

clear predictedTrainOutput predictedValOutput predictedTestOutput finalState...
      yTreinoPrevisto yValPrevisto yTestePrevisto filename saida auxr
  
plotregression(par_dist_SRG{posBestSRG}(1,:),par_dist_SRG{posBestSRG}(2,:));
subplot(1,1,1);
xlabel('Separação das entradas: ||u_i(t)-u_j(t)||');
ylabel('Separação dos estados:  ||x_i(t)-x_j(t)||');
legend('||x_i(t)-x_j(t)||=||u_i(t)-u_j(t)||','Regressão','Dados');
savefig('separation_ratio_graph_SRG');

% melhor ESN Random em relação ao teste
[bestErrorRandom,posBestRandom]=min(testErrorRandom);
bestEsnRandom=tr_esn_random{1,posBestRandom};
% Previsão do conjunto de treinamento
[predictedTrainOutput,finalState] = test_esn_modificada(trainInputSequence, bestEsnRandom, nForgetPoints);
yTreinoPrevisto = desnormaliza(predictedTrainOutput,yMin,yMax);
% Previsão do conjunto de validação 
[predictedValOutput,finalState] = test_esn_modificada(valInputSequence, bestEsnRandom, 0,'startingState',finalState);
yValPrevisto = desnormaliza(predictedValOutput,yMin,yMax);
% Previsão do conjunto de teste
predictedTestOutput = test_esn_modificada(testInputSequence, bestEsnRandom, 0,'startingState',finalState);
yTestePrevisto = desnormaliza(predictedTestOutput,yMin,yMax);

for j = 1:size(yTestePrevisto,2)
    figure('Name','Previsão das variáveis de saída com a melhor ESN (teste) da Etapa 2 - Random','NumberTitle','on');
    amostras = [1:length([yTreino; yValidacao;yTeste])];
    subplot(3,1,1);
    plot(amostras((nForgetPoints+1):length(yTreino)),yTreino((nForgetPoints+1):end,j),'b');
    hold on
    plot(amostras((nForgetPoints+1):length(yTreino)),yTreinoPrevisto(:,j),'r');
    legend('Real','Previsto');
    xlabel('Amostras','FontSize',14);
    
    if(size(yTestePrevisto,2)==1)
        saida = strcat('y(k) ');
    else        
        auxr = num2str(j);
        saida = strcat('y_',auxr,'(k) ');
    end
    
    ylabel(saida,'FontSize',14);
    title('Treinamento','FontSize',14);
    subplot(3,1,2);
    plot(amostras(length(yTreino)+1:length([yTreino;yValidacao])),yValidacao(:,j),'b');
    hold on
    plot(amostras(length(yTreino)+1:length([yTreino;yValidacao])),yValPrevisto(:,j),'r');
    legend('Real','Previsto');
    xlabel('Amostras','FontSize',14);
    ylabel(saida,'FontSize',14);
    title('Validação','FontSize',14);
    subplot(3,1,3);
    plot(amostras(length([yTreino;yValidacao])+1:length([yTreino;yValidacao;yTeste])),yTeste(:,j),'b');
    hold on
    plot(amostras(length([yTreino;yValidacao])+1:length([yTreino;yValidacao;yTeste])),yTestePrevisto(:,j),'r');
    legend('Real','Previsto');
    xlabel('Amostras','FontSize',14);
    ylabel(saida,'FontSize',14);
    title('Teste','FontSize',14);
    filename = strcat('previsao_',saida,'_Random');
    savefig(filename);
end

clear predictedTrainOutput predictedValOutput predictedTestOutput finalState...
      yTreinoPrevisto yValPrevisto yTestePrevisto filename saida auxr

 for exp=1:numExp  
   
   % Período de washout
   stateCollectMat = compute_statematrix(trainInputSequence(1:nForgetPoints,:),trainOutputSequence(1:nForgetPoints,:),esn_random{exp},0);
   initialState =[stateCollectMat(end,:) trainOutputSequence(nForgetPoints,:)];     
   
   % Agrupamento usando os vizinhos mais próximos
   %[idx, dist] = knnsearch(trainInputSequence((nForgetPoints+1):end,:),trainInputSequence((nForgetPoints+1):end,:),'distance','euclidean','k',2); % Distancia
   pseudoPadrao = [trainInputSequence((nForgetPoints+1):end,:) trainOutputSequence(nForgetPoints:(end-1),:)];
   [idx, dist] = knnsearch(pseudoPadrao,pseudoPadrao,'distance','euclidean','k',2); % Distancia
   % Distância euclidiana dos padrões de entrada agrupados
   dist_entradas=dist(:,2);
   
   % Coleta dos estados gerados pelos padrões, desconsiderando o efeito de estados
   % anteriores e fazendo teach forcing na saída 
   estados = ...
    compute_statematrix_SRG_simplificada2(trainInputSequence((nForgetPoints+1):end,:), trainOutputSequence((nForgetPoints+1):end,:), esn_random{exp}, 0,initialState);
   
   % Distância dos estados agrupados pelo knn
   for j=1:size(idx,1) % Selecao de pares de estados para determinar a norma 
        primer_estado=estados(idx(j,1),:);  % Primeiro estado obtido
        segundo_estado=estados(idx(j,2),:); % Segundo estado obtido
        [idx_estados,dist_estados_parcial] = knnsearch(primer_estado,segundo_estado,'dist','euclidean','k',2); % obter a distancia euclidiana
        dist_estados(j,1)=dist_estados_parcial;
   end
   
   dist_entradas=dist_entradas';
   dist_estados=dist_estados';
   
   par_dist_bestRandom{exp} = [dist_entradas ; dist_estados]; % Armazena as distancias geradas para cada ESN

   clear primer_estado segundo_estado idx_estados dist_estados_parcial dist_estados estados ...
         idx dist esn dist_entradas

  for k=1:size(par_dist_bestRandom{exp},2) % Obtencao do erro da regressao linear
        erro_chvn(k)=abs(par_dist_bestRandom{exp}(1,k)-par_dist_bestRandom{exp}(2,k));
  end
   
  SRG_bestRandom(exp)=sum(erro_chvn);  
  
  clear erro_chvn SRG_rede distancias stateCollectMat initialState
 end
 
figure;
plotregression(par_dist_bestRandom{posBestRandom}(1,:),par_dist_bestRandom{posBestRandom}(2,:));
subplot(1,1,1);
xlabel('Separação das entradas: ||u_i(t)-u_j(t)||');
ylabel('Separação dos estados:  ||x_i(t)-x_j(t)||');
legend('||x_i(t)-x_j(t)||=||u_i(t)-u_j(t)||','Regressão','Dados');
savefig('separation_ratio_graph_Random');

% % melhor ESN Pesos em relação ao teste
% [bestErrorPesos,posBestPesos]=min(testErrorPesos);
% bestEsnPesos=trESNP{posBestPesos};
% % Previsão do conjunto de treinamento
% [predictedTrainOutput,finalState] = test_esn_modificada(trainInputSequence, bestEsnPesos, nForgetPoints);
% yTreinoPrevisto = desnormaliza(predictedTrainOutput,yMin,yMax);
% % Previsão do conjunto de validação 
% [predictedValOutput,finalState] = test_esn_modificada(valInputSequence, bestEsnPesos, 0,'startingState',finalState);
% yValPrevisto = desnormaliza(predictedValOutput,yMin,yMax);
% % Previsão do conjunto de teste
% predictedTestOutput = test_esn_modificada(testInputSequence, bestEsnPesos, 0,'startingState',finalState);
% yTestePrevisto = desnormaliza(predictedTestOutput,yMin,yMax);
% 
% for j = 1:size(yTestePrevisto,2)
%     figure('Name','Previsão das variáveis de saída com a melhor ESN (teste) da Etapa 2 - Otimização dos Pesos','NumberTitle','on');
%     amostras = [1:length([yTreino; yValidacao;yTeste])];
%     subplot(3,1,1);
%     plot(amostras((nForgetPoints+1):length(yTreino)),yTreino((nForgetPoints+1):end,j),'b');
%     hold on
%     plot(amostras((nForgetPoints+1):length(yTreino)),yTreinoPrevisto(:,j),'r');
%     legend('Real','Previsto');
%     xlabel('Amostras','FontSize',14);
%     
%     if(size(yTestePrevisto,2)==1)
%         saida = strcat('y(k) ');
%     else        
%         auxr = num2str(j);
%         saida = strcat('y_',auxr,'(k) ');
%     end
%     
%     ylabel(saida,'FontSize',14);
%     title('Treinamento','FontSize',14);
%     subplot(3,1,2);
%     plot(amostras(length(yTreino)+1:length([yTreino;yValidacao])),yValidacao(:,j),'b');
%     hold on
%     plot(amostras(length(yTreino)+1:length([yTreino;yValidacao])),yValPrevisto(:,j),'r');
%     legend('Real','Previsto');
%     xlabel('Amostras','FontSize',14);
%     ylabel(saida,'FontSize',14);
%     title('Validação','FontSize',14);
%     subplot(3,1,3);
%     plot(amostras(length([yTreino;yValidacao])+1:length([yTreino;yValidacao;yTeste])),yTeste(:,j),'b');
%     hold on
%     plot(amostras(length([yTreino;yValidacao])+1:length([yTreino;yValidacao;yTeste])),yTestePrevisto(:,j),'r');
%     legend('Real','Previsto');
%     xlabel('Amostras','FontSize',14);
%     ylabel(saida,'FontSize',14);
%     title('Teste','FontSize',14);
%     filename = strcat('previsao_',saida,'_Pesos');
%     savefig(filename);
% end
% clear predictedTrainOutput predictedValOutput predictedTestOutput finalState...
%       yTreinoPrevisto yValPrevisto yTestePrevisto filename saida auxr
% 
%  for exp=1:numExp  
%      
%    % Período de washout
%    stateCollectMat = compute_statematrix(trainInputSequence(1:nForgetPoints,:),trainOutputSequence(1:nForgetPoints,:),esnP{exp},0);
%    initialState =[stateCollectMat(end,:) trainOutputSequence(nForgetPoints,:)]; 
%    
%    % Agrupamento usando os vizinhos mais próximos
%    %[idx, dist] = knnsearch(trainInputSequence((nForgetPoints+1):end,:),trainInputSequence((nForgetPoints+1):end,:),'distance','euclidean','k',2); % Distancia
%    pseudoPadrao = [trainInputSequence((nForgetPoints+1):end,:) trainOutputSequence(nForgetPoints:(end-1),:)];
%    [idx, dist] = knnsearch(pseudoPadrao,pseudoPadrao,'distance','euclidean','k',2); % Distancia
%    % Distância euclidiana dos padrões de entrada agrupados
%    dist_entradas=dist(:,2);
%    
%    % Coleta dos estados gerados pelos padrões, desconsiderando o efeito de estados
%    % anteriores e fazendo teach forcing na saída 
%    estados = ...
%     compute_statematrix_SRG_simplificada2(trainInputSequence((nForgetPoints+1):end,:), trainOutputSequence((nForgetPoints+1):end,:), esnP{exp}, 0,initialState);
%    
%    % Distância dos estados agrupados pelo knn
%    for j=1:size(idx,1) % Selecao de pares de estados para determinar a norma 
%         primer_estado=estados(idx(j,1),:);  % Primeiro estado obtido
%         segundo_estado=estados(idx(j,2),:); % Segundo estado obtido
%         [idx_estados,dist_estados_parcial] = knnsearch(primer_estado,segundo_estado,'dist','euclidean','k',2); % obter a distancia euclidiana
%         dist_estados(j,1)=dist_estados_parcial;
%    end
%    
%    dist_entradas=dist_entradas';
%    dist_estados=dist_estados';
%    
%    par_dist_bestPesos{exp} = [dist_entradas ; dist_estados]; % Armazena as distancias geradas para cada ESN
% 
%    clear primer_estado segundo_estado idx_estados dist_estados_parcial dist_estados estados ...
%          idx dist esn dist_entradas
% 
%   for k=1:size(par_dist_bestPesos{exp},2) % Obtencao do erro da regressao linear
%         erro_chvn(k)=abs(par_dist_bestPesos{exp}(1,k)-par_dist_bestPesos{exp}(2,k));
%   end
%    
%   SRG_bestPesos(exp)=sum(erro_chvn);  
%   
%   clear erro_chvn SRG_rede distancias stateCollectMat initialState
%  end
% figure;
% plotregression(par_dist_bestPesos{posBestPesos}(1,:),par_dist_bestPesos{posBestPesos}(2,:));
% subplot(1,1,1);
% xlabel('Separação das entradas: ||u_i(t)-u_j(t)||');
% ylabel('Separação dos estados:  ||x_i(t)-x_j(t)||');
% legend('||x_i(t)-x_j(t)||=||u_i(t)-u_j(t)||','Regressão','Dados');
% savefig('separation_ratio_graph_Pesos');

% Impressão dos resultados
fprintf('\n\n             Etapa 1\n\n');


             Etapa 1

% Etapa 1
for exp =1:numExp
    
fprintf('Exp %d - Aptidao: %f\n',exp,bestFitness(exp));
    
end
Exp 1 - Aptidao: 6.478189

fprintf('\nAptidão Média: %f\n',MeanFitness);

Aptidão Média: 6.478189
fprintf('\nAptidão Desvio: %f\n',StdFitness);

Aptidão Desvio: 0.000000
fprintf('\nTempo Total(%d experimentos): %f s\n',numExp,tempo1);

Tempo Total(1 experimentos): 340.541217 s

% Etapa 2 - Random
fprintf('\n\n             Etapa 2 - Random\n\n');


             Etapa 2 - Random

fprintf('                RMSE\n\n');
                RMSE

for exp =1:numExp
    
fprintf('Exp %d - Treinamento: %f  Validacao: %f  Teste: %f  SRG: %f\n',exp,trainErrorRandom(exp),...
    valErrorRandom(exp),testErrorRandom(exp),SRG_bestRandom(exp));
    
end
Exp 1 - Treinamento: 0.485573  Validacao: 9.209816  Teste: 4.158474  SRG: 2218.667107

fprintf('\nMédia: Treinamento: %f  Validacao: %f  Teste: %f\n',meanTrainErrorRandom,...
    meanValErrorRandom,meanTestErrorRandom);

Média: Treinamento: 0.485573  Validacao: 9.209816  Teste: 4.158474
fprintf('\nDesvio: Treinamento: %f  Validacao: %f  Teste: %f\n',stdTrainErrorRandom,...
    stdValErrorRandom,stdTestErrorRandom);

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000
fprintf('\nMelhor: Treinamento: %f  Validacao: %f  Teste: %f  SRG: %f\n\n',trainErrorRandom(posBestRandom),...
    valErrorRandom(posBestRandom),testErrorRandom(posBestRandom),SRG_bestRandom(posBestRandom));

Melhor: Treinamento: 0.485573  Validacao: 9.209816  Teste: 4.158474  SRG: 2218.667107


fprintf('                fit\n\n');
                fit

for exp =1:numExp
    
fprintf('Exp %d - Treinamento: %f  Validacao: %f  Teste: %f  SRG: %f\n',exp,fitTrainErrorRandom(exp),...
    fitValErrorRandom(exp),fitTestErrorRandom(exp),SRG_bestRandom(exp));
    
end
Exp 1 - Treinamento: 95.518665  Validacao: 66.774588  Teste: 74.197810  SRG: 2218.667107

fprintf('\nMédia: Treinamento: %f  Validacao: %f  Teste: %f\n',meanfitTrainErrorRandom,...
    meanfitValErrorRandom,meanfitTestErrorRandom);

Média: Treinamento: 95.518665  Validacao: 66.774588  Teste: 74.197810
fprintf('\nDesvio: Treinamento: %f  Validacao: %f  Teste: %f\n',stdfitTrainErrorRandom,...
    stdfitValErrorRandom,stdfitTestErrorRandom);

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000
fprintf('\nMelhor: Treinamento: %f  Validacao: %f  Teste: %f  SRG: %f\n',fitTrainErrorRandom(posBestRandom),...
    fitValErrorRandom(posBestRandom),fitTestErrorRandom(posBestRandom),SRG_bestRandom(posBestRandom));

Melhor: Treinamento: 95.518665  Validacao: 66.774588  Teste: 74.197810  SRG: 2218.667107

fprintf('                RRSE\n\n');
                RRSE

for exp =1:numExp
    
fprintf('Exp %d - Treinamento: %f  Validacao: %f  Teste: %f  SRG: %f\n',exp,RRSETrainErrorRandom(exp),...
    RRSEValErrorRandom(exp),RRSETestErrorRandom(exp),SRG_bestRandom(exp));
    
end
Exp 1 - Treinamento: 0.017094  Validacao: 0.326937  Teste: 0.166690  SRG: 2218.667107

fprintf('\nMédia: Treinamento: %f  Validacao: %f  Teste: %f\n',meanRRSETrainErrorRandom,...
    meanRRSEValErrorRandom,meanRRSETestErrorRandom);

Média: Treinamento: 0.017094  Validacao: 0.326937  Teste: 0.166690
fprintf('\nDesvio: Treinamento: %f  Validacao: %f  Teste: %f\n',stdRRSETrainErrorRandom,...
    stdRRSEValErrorRandom,stdRRSETestErrorRandom);

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000
fprintf('\nMelhor: Treinamento: %f  Validacao: %f  Teste: %f  SRG: %f\n',RRSETrainErrorRandom(posBestRandom),...
    RRSEValErrorRandom(posBestRandom),RRSETestErrorRandom(posBestRandom),SRG_bestRandom(posBestRandom));

Melhor: Treinamento: 0.017094  Validacao: 0.326937  Teste: 0.166690  SRG: 2218.667107

fprintf('\nTempo Total(%d experimentos): %f s\n',numExp,tempoTotalRandom);

Tempo Total(1 experimentos): 260.924715 s

% Etapa 2 - SRG
fprintf('\n\n             Etapa 2 - SRG\n\n');


             Etapa 2 - SRG

fprintf('                RMSE\n\n');
                RMSE

for exp =1:numExp
    
fprintf('Exp %d - Treinamento: %f  Validacao: %f  Teste: %f  SRG: %f\n',exp,trainErrorSRG(exp),...
    valErrorSRG(exp),testErrorSRG(exp),SRG{exp});
    
end
Exp 1 - Treinamento: 0.485573  Validacao: 9.209816  Teste: 4.158474  SRG: 2218.667107

fprintf('\nMédia: Treinamento: %f  Validacao: %f  Teste: %f\n',meanTrainErrorSRG,...
    meanValErrorSRG,meanTestErrorSRG);

Média: Treinamento: 0.485573  Validacao: 9.209816  Teste: 4.158474
fprintf('\nDesvio: Treinamento: %f  Validacao: %f  Teste: %f\n',stdTrainErrorSRG,...
    stdValErrorSRG,stdTestErrorSRG);

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000
fprintf('\nMelhor: Treinamento: %f  Validacao: %f  Teste: %f  SRG: %f\n\n',trainErrorSRG(posBestSRG),...
    valErrorSRG(posBestSRG),testErrorSRG(posBestSRG),SRG{posBestSRG});

Melhor: Treinamento: 0.485573  Validacao: 9.209816  Teste: 4.158474  SRG: 2218.667107



fprintf('                fit\n\n');
                fit

for exp =1:numExp
    
fprintf('Exp %d - Treinamento: %f  Validacao: %f  Teste: %f  SRG: %f\n',exp,fitTrainErrorSRG(exp),...
    fitValErrorSRG(exp),fitTestErrorSRG(exp),SRG{exp});
    
end
Exp 1 - Treinamento: 95.518665  Validacao: 66.774588  Teste: 74.197810  SRG: 2218.667107

fprintf('\nMédia: Treinamento: %f  Validacao: %f  Teste: %f\n',meanfitTrainErrorSRG,...
    meanfitValErrorSRG,meanfitTestErrorSRG);

Média: Treinamento: 95.518665  Validacao: 66.774588  Teste: 74.197810
fprintf('\nDesvio: Treinamento: %f  Validacao: %f  Teste: %f\n',stdfitTrainErrorSRG,...
    stdfitValErrorSRG,stdfitTestErrorSRG);

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000
fprintf('\nMelhor: Treinamento: %f  Validacao: %f  Teste: %f  SRG: %f\n',fitTrainErrorSRG(posBestSRG),...
    fitValErrorSRG(posBestSRG),fitTestErrorSRG(posBestSRG),SRG{posBestSRG});

Melhor: Treinamento: 95.518665  Validacao: 66.774588  Teste: 74.197810  SRG: 2218.667107

fprintf('                RRSE\n\n');
                RRSE

for exp =1:numExp
    
fprintf('Exp %d - Treinamento: %f  Validacao: %f  Teste: %f  SRG: %f\n',exp,RRSETrainErrorSRG(exp),...
    RRSEValErrorSRG(exp),RRSETestErrorSRG(exp),SRG{exp});
    
end
Exp 1 - Treinamento: 0.017094  Validacao: 0.326937  Teste: 0.166690  SRG: 2218.667107

fprintf('\nMédia: Treinamento: %f  Validacao: %f  Teste: %f\n',meanRRSETrainErrorSRG,...
    meanRRSEValErrorSRG,meanRRSETestErrorSRG);

Média: Treinamento: 0.017094  Validacao: 0.326937  Teste: 0.166690
fprintf('\nDesvio: Treinamento: %f  Validacao: %f  Teste: %f\n',stdRRSETrainErrorSRG,...
    stdRRSEValErrorSRG,stdRRSETestErrorSRG);

Desvio: Treinamento: 0.000000  Validacao: 0.000000  Teste: 0.000000
fprintf('\nMelhor: Treinamento: %f  Validacao: %f  Teste: %f  SRG: %f\n',RRSETrainErrorSRG(posBestSRG),...
    RRSEValErrorSRG(posBestSRG),RRSETestErrorSRG(posBestSRG),SRG{posBestSRG});

Melhor: Treinamento: 0.017094  Validacao: 0.326937  Teste: 0.166690  SRG: 2218.667107
fprintf('\nTempo Total(%d experimentos): %f s\n',numExp,tempoTotalSRG);

Tempo Total(1 experimentos): 250.634428 s

% % Etapa 2 - Otimização dos pesos do reservatório
% fprintf('\n\n             Etapa 2 - Otimização dos pesos do reservatório\n\n');
% fprintf('                RMSE\n\n');
% for exp =1:numExp
%     
% fprintf('Exp %d - Treinamento: %f  Validacao: %f  Teste: %f  SRG: %f\n',exp,trainErrorPesos(exp),...
%     valErrorPesos(exp),testErrorPesos(exp),SRG_bestPesos(exp));
%     
% end
% 
% fprintf('\nMédia: Treinamento: %f  Validacao: %f  Teste: %f\n',meanTrainErrorPesos,...
%     meanValErrorPesos,meanTestErrorPesos);
% fprintf('\nDesvio: Treinamento: %f  Validacao: %f  Teste: %f\n',stdTrainErrorPesos,...
%     stdValErrorPesos,stdTestErrorPesos);
% fprintf('\nMelhor: Treinamento: %f  Validacao: %f  Teste: %f  SRG: %f\n\n',trainErrorPesos(posBestPesos),...
%     valErrorPesos(posBestPesos),testErrorPesos(posBestPesos),SRG_bestPesos(posBestPesos));
% 
% fprintf('                fit\n\n');
% for exp =1:numExp
%     
% fprintf('Exp %d - Treinamento: %f  Validacao: %f  Teste: %f  SRG: %f\n',exp,fitTrainErrorPesos(exp),...
%     fitValErrorPesos(exp),fitTestErrorPesos(exp),SRG_bestPesos(exp));
%     
% end
% 
% fprintf('\nMédia: Treinamento: %f  Validacao: %f  Teste: %f\n',meanfitTrainErrorPesos,...
%     meanfitValErrorPesos,meanfitTestErrorPesos);
% fprintf('\nDesvio: Treinamento: %f  Validacao: %f  Teste: %f\n',stdfitTrainErrorPesos,...
%     stdfitValErrorPesos,stdfitTestErrorPesos);
% fprintf('\nMelhor: Treinamento: %f  Validacao: %f  Teste: %f  SRG: %f\n',fitTrainErrorPesos(posBestPesos),...
%     fitValErrorPesos(posBestPesos),fitTestErrorPesos(posBestPesos),SRG_bestPesos(posBestPesos));
% 
% fprintf('                RRSE\n\n');
% for exp =1:numExp
%     
% fprintf('Exp %d - Treinamento: %f  Validacao: %f  Teste: %f  SRG: %f\n',exp,RRSETrainErrorPesos(exp),...
%     RRSEValErrorPesos(exp),RRSETestErrorPesos(exp),SRG_bestPesos(exp));
%     
% end
% 
% fprintf('\nMédia: Treinamento: %f  Validacao: %f  Teste: %f\n',meanRRSETrainErrorPesos,...
%     meanRRSEValErrorPesos,meanRRSETestErrorPesos);
% fprintf('\nDesvio: Treinamento: %f  Validacao: %f  Teste: %f\n',stdRRSETrainErrorPesos,...
%     stdRRSEValErrorPesos,stdRRSETestErrorPesos);
% fprintf('\nMelhor: Treinamento: %f  Validacao: %f  Teste: %f  SRG: %f\n',RRSETrainErrorPesos(posBestPesos),...
%     RRSEValErrorPesos(posBestPesos),RRSETestErrorPesos(posBestPesos),SRG_bestPesos(posBestPesos));
% 
% fprintf('\nTempo Total(%d experimentos): %f s\n',numExp,tempoTotalPesos);

save (nomeTeste)

diary off
